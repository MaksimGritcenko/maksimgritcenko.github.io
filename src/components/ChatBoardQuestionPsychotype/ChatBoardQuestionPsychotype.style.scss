.ChatBoardQuestionPsychotype {
    padding: 10px 20px;
    border-radius: 5px;
    background-color: #ebf9f9;

    &:not(:last-child) {
        margin-bottom: 15px;
    }

    &-InputRow {
        display: flex;
        margin: 10px 0 20px;
        justify-content: space-between;
    }

    &-Header {
        font-weight: normal;
        margin-bottom: 10px;
    }

    &-InputWrapper {
        flex-basis: 80%;

        input {
            font-size: 14px;
        }
    }

    &-Actions {
        display: flex;

        button {
            width: 38px;

            &:not(:first-child) {
                margin-left: 5px;
            }
        }
    }

    &-AnswerTab {
        display: flex;
        align-items: center;
        max-width: 100%;
        background-color: #fff;
        padding: 5px 10px;
        border-radius: 10px;
        margin-bottom: 10px;

        &:not(:last-child) {
            margin-right: 10px;
        }

        button {
            margin: 5px 0 5px 10px;
        }
        p {
            text-overflow: ellipsis;
            max-width: 100%;
            overflow: hidden;
        }
    }

    &-AnswerTabs {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
    }

    &-AnswerTabText {
        font-weight: 400;
    }

    &-AddAnswerInputWrapper {
        display: flex;
        flex-basis: 80%;
    }

    &-AnswerTabsHeader {
        font-weight: 400;
        font-size: 14px;
    }

    &-DropdownButton {
        &:after {
            content: 'Answer section';
            display: block;
            position: absolute;
            top: -100%;
            font-size: 14px;
            left: -85%;
            background-color: rgba(0,0,0,.7);
            border-radius: 6px;
            white-space: nowrap;
            color: #fff;
            padding: 5px;
            opacity: 0;
            visibility: hidden;
            transition: all .2s ease-out;
        }

        &:active,
        &:hover {
            &:after {
                opacity: 1;
                visibility: visible;
            }
        }

        svg {
            position: relative;
            top: 2px;
            transition: transform .2s ease-out;
        }

        &_isExpanded {
            svg {
                transform: scale(-1);
            }
        }
    }
}